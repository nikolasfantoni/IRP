rm(list=ls())
library('plot3D')
install.packages("plot3D")
N<-30
xc1<-rnorm(N)*0.5+2
xc2<-rnorm(N)*0.5+4
vec0<-matrix(0,N)
plot(xc1,vec0,col='red',xlim=c(0,6),ylim=c(0,1),xlab='x',ylab='')
par(new=T)
plot(xc2,vec0,col='blue',xlim=c(0,6),ylim=c(0,1),xlab='',ylab='')
rm(list=ls())
library('plot3D')
fnormal1var<-function(x,m,r) ((1/(sqrt(2*pi*r*r)))*exp(-0.5 * ((x-m)/(r))^2))
m1<-mean(xc1)
m2<-mean(xc2)
s1<-sd(xc1)
s2<-sd(xc2)
f1<-fnormal1var(xrange,m1,s1)
f2<-fnormal1var(xrange,m2,s2)
yrange2<-1*(f2>f1)
par(new=T)
plot(xrange,f1,type = 'l',col='red',xlim=c(0,6),ylim = c(0,1),xlab='x',ylab='')
par(new=T)
plot(xrange,f2,type = 'l',col='blue',xlim=c(0,6),ylim = c(0,1),xlab='',ylab='')
par(new=T)
plot(xrange,yrange2,type = 'l',col='green',xlim=c(0,6),ylim = c(0,1),xlab='x',ylab='Classe(x)')
rm(list=ls())
library('plot3D')
# definição dos dados duas dimensoes
s1<-0.6
s2<-0.6
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' xs ' ,ylab= ' y ' )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
# definição dos dados duas dimensoes
s1<-0.6
s2<-0.6
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' xs ' ,ylab= ' y ' )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
rm(list=ls())
library('plot3D')
# definição dos dados duas dimensoes
s1<-0.6
s2<-0.6
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
# definição dos dados duas dimensoes
s1<-1
s2<-1
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
rm(list=ls())
library('plot3D')
# Tem-se como objetivo:
#   Estimar a densidade para as duas classes.
#   Apresentar o gráfico de densidade de probabilidade para duas variáveis.
#   Apresentar o gráfico de superfície de probabilidade para duas variáveis.
# definição dos dados duas dimensoes
s1<-1
s2<-1
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
rm(list=ls())
library('plot3D')
# Tem-se como objetivo:
#   Estimar a densidade para as duas classes.
#   Apresentar o gráfico de densidade de probabilidade para duas variáveis.
#   Apresentar o gráfico de superfície de probabilidade para duas variáveis.
# definição dos dados duas dimensoes
s1<-1
s2<-1
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
rm(list=ls())
library('plot3D')
# Tem-se como objetivo:
#   Estimar a densidade para as duas classes.
#   Apresentar o gráfico de densidade de probabilidade para duas variáveis.
#   Apresentar o gráfico de superfície de probabilidade para duas variáveis.
# definição dos dados duas dimensoes
s1<-1
s2<-1
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0.5)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0.5)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),-0.5)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),-0.5)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0.8)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0.8)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
#funcao para estimativa da densidade de 2 variáveis
pdf2var<-function(x,y,u1,u2,s1,s2,p) {(1/(2*pi*s1*s2*sqrt(1-(p^2))))*
exp((-(1)/(2*(1-(p^2))))*((((x-u1)^2)/((s1)^2))+(((y-u2)^2)/((s2)^2))-
((2*p*(x-u1)*(y-u2))/(s1*s2))))
}
#cáculo da média e desvio padrão das classes
u1<-rbind(mean(xc1[,1]),mean(xc1[,2]))
u2<-rbind(mean(xc2[,1]),mean(xc2[,2]))
s1<-rbind(sd(xc1[,1]),sd(xc1[,2]))
s2<-rbind(sd(xc2[,1]),sd(xc2[,2]))
#estimando as densidades em cada ponto de um grid
seqi<-seq(0.06,6,0.06)
seqj<-seq(0.06,6,0.06)
M1 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
M2 <- matrix(0,nrow=length(seqi),ncol=length(seqj))
ci<-0
for (i in seqi){
ci<-ci+1
cj<-0
for(j in seqj)
{
cj<-cj+1
M1[ci,cj]<- pdf2var(i,j,mean(xc1[,1]),mean(xc1[,2]),sd(xc1[,1]),sd(xc1[,2]),0.2)
M2[ci,cj]<- pdf2var(i,j,mean(xc2[,1]),mean(xc2[,2]),sd(xc2[,1]),sd(xc2[,2]),0.2)
}
}
#plotando as densidades
persp3D(seqi,seqj,M1,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5)
persp3D(seqi,seqj,M2,counter=T,theta = 55, phi = 30, r = 40, d = 0.1, expand = 0.5,
ltheta = 90, lphi = 180, shade = 0.4, ticktype = "detailed", nticks=5, add=T)
#plotando as superfícies de contorno
contour2D(M1,seqi,seqj,colkey = NULL)
par(new=T)
contour2D(M2,seqi,seqj,colkey = NULL)
rm(list=ls())
library('plot3D')
# Tem-se como objetivo:
#   Estimar a densidade para as duas classes.
#   Apresentar o gráfico de densidade de probabilidade para duas variáveis.
#   Apresentar o gráfico de superfície de probabilidade para duas variáveis.
# definição dos dados duas dimensoes
s1<-0.8
s2<-0.4
nc<-100
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
View(xc1)
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
rm(list=ls())
library('plot3D')
# Tem-se como objetivo:
#   Estimar a densidade para as duas classes.
#   Apresentar o gráfico de densidade de probabilidade para duas variáveis.
#   Apresentar o gráfico de superfície de probabilidade para duas variáveis.
# definição dos dados duas dimensoes
s1<-0.8
s2<-0.4
nc<-200
xc1<-matrix(rnorm(nc*2),ncol=2)*s1 + t(matrix((c(2,2)),ncol=nc,nrow=2))
xc2<-matrix(rnorm(nc*2),ncol=2)*s2 + t(matrix((c(4,4)),ncol=nc,nrow=2))
plot(xc1[,1],xc1[,2],col = ' red ' , xlim = c(0,6),ylim = c(0,6),xlab = ' x1 ' ,ylab= ' x2 ', main="Distribuição dos Dados" )
par(new=T)
plot(xc2[,1],xc2[,2],col = ' blue ' , xlim = c(0,6),ylim = c(0,6),xlab = '' ,ylab= '' )
